@page "/checkout"
@inject OrdersClient OrdersClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]


<div class="main">
    <EditForm Model="OrderState.order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.order.DeliveryAddress" />
            </div>
        </div>

        <button  type="submit" class="checkout-button btn btn-warning">
            Place order
        </button>


        <DataAnnotationsValidator />
       
    </EditForm>

</div>

@code {
 
    //Use this property to prevent accidental double-submission of the form.
    bool isSubmitting = false;
    async Task PlaceOrder()
    {
        if(!isSubmitting){
            isSubmitting = true;
            //var response = await HttpClient.PostAsJsonAsync("orders", OrderState.order);
            //var newOrderId = await response.Content.ReadFromJsonAsync<int>();
            try{
                var newOrderId = await OrdersClient.PlaceOrder(OrderState.order);
                OrderState.ResetOrder();
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            }
            catch(AccessTokenNotAvailableException ex){
                ex.Redirect();
            }
            isSubmitting = false;
        }
    }

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}